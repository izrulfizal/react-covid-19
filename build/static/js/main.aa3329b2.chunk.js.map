{"version":3,"sources":["App.js","components/Sidebar.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","App","props","state","lng","lat","zoom","map","Map","container","this","mapContainer","style","center","axios","get","then","res","data","covidList","console","log","forEach","element","location","coordinates","el","document","createElement","className","status","duration","Marker","setLngLat","addTo","setState","catch","error","ref","Component","Sidebar","features","List","disablePadding","dense","ListItem","button","ListItemText","properties","reportedDate","locationName","description","href","site","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8ttFAMAA,IAASC,YAAc,gG,IA4ERC,E,kDAzEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAK,EACLC,IAAK,GACLC,KAAM,GALK,E,gEASE,IAAD,OACVC,EAAM,IAAIR,IAASS,IAAI,CACzBC,UAAWC,KAAKC,aAChBC,MAAO,uDACPC,OAAQ,CAAC,MAAO,UAChBP,KAAMI,KAAKP,MAAMG,OAKrBQ,IACKC,IADL,OACiB,IACZC,MAAK,SAACC,GACH,IAAMC,EAAOD,EAAIC,KAAKC,UACtBC,QAAQC,IAAIH,GAGZA,EAAKI,SAAQ,SAACC,GACVH,QAAQC,IAAIE,EAAQC,SAASC,aAC7B,IAAIC,EAAKC,SAASC,cAAc,OAEhCF,EAAGG,UAAY,SAEO,aAAjBN,EAAQO,QAAwBP,EAAQQ,UAfxC,GAgBDL,EAAGG,UAAY,kBAEQ,aAAjBN,EAAQO,QAAwBP,EAAQQ,SAlB7C,GAmBDL,EAAGG,UAAY,sBAEQ,eAAjBN,EAAQO,QAA0BP,EAAQQ,UArB/C,GAsBDL,EAAGG,UAAY,qBAEQ,eAAjBN,EAAQO,QAA0BP,EAAQQ,SAxB/C,GAyBDL,EAAGG,UAAY,yBAEVN,EAAQQ,UA3BZ,GA4BDL,EAAGG,UAAY,SAGfH,EAAGG,UAAY,UAGnB,IAAI9B,IAASiC,OAAON,GAAIO,UAAU,CAACV,EAAQC,SAASC,YAAY,GAAIF,EAAQC,SAASC,YAAY,KAAKS,MAAM3B,MAIhH,EAAK4B,SAAS,CACV5B,WAGP6B,OAAM,SAACC,GACJjB,QAAQC,IAAIgB,Q,+BAId,IAAD,OACL,OACI,6BACI,yBAAKC,IAAK,SAACZ,GAAD,OAAS,EAAKf,aAAee,GAAKG,UAAU,sB,GApEpDU,a,gCCyBHC,EAxBCtB,EAAKuB,SAASlC,KAAI,SAACW,GAE/B,OAEE,kBAACwB,EAAA,EAAD,CAAMC,gBAAc,EAACC,OAAK,GAExB,kBAACC,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,KACE,yBAAKlB,UAAY,YACjB,+BAAQX,EAAK8B,WAAWC,cACxB,4BAAK/B,EAAK8B,WAAWE,cACrB,2BAAIhC,EAAK8B,WAAWG,aACpB,uBAAGC,KAAMlC,EAAK8B,WAAWK,MAAzB,UAAuCnC,EAAK8B,WAAWK,aCT/CC,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,WAG1BH,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,iEACCpB,GAEHb,SAASkC,eAAe,YDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAM8B,c","file":"static/js/main.aa3329b2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nmapboxgl.accessToken = \"pk.eyJ1IjoiZXJoYW5mYWRsaSIsImEiOiJjanlpcXJ0d3EwZDF2M21xaHljZXcyN2x1In0.QykinU8klSV-ZCDEi0G8rQ\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lng: 5,\r\n            lat: 34,\r\n            zoom: 9,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: \"mapbox://styles/erhanfadli/ck84p63gd04gl1impbqwi9cza\",\r\n            center: [101.9, 3.109308],\r\n            zoom: this.state.zoom,\r\n        });\r\n\r\n        const noOfDays = 14;\r\n\r\n        axios\r\n            .get(`/api`, {})\r\n            .then((res) => {\r\n                const data = res.data.covidList;\r\n                console.log(data);\r\n\r\n                const markers = [];\r\n                data.forEach((element) => {\r\n                    console.log(element.location.coordinates);\r\n                    var el = document.createElement(\"div\");\r\n\r\n                    el.className = \"marker\";\r\n\r\n                    if ((element.status== \"lock down\")&&(element.duration <= noOfDays)){\r\n                        el.className = 'marker-lockdown';\r\n                    }\r\n                    else if ((element.status== \"lock down\")&&(element.duration > noOfDays)){\r\n                        el.className = 'marker-lockdown-old';\r\n                    }\r\n                    else if ((element.status== \"road closed\")&&(element.duration <= noOfDays)){\r\n                        el.className = 'marker-road-closed';\r\n                    }\r\n                    else if ((element.status== \"road closed\")&&(element.duration > noOfDays)){\r\n                        el.className = 'marker-road-closed-old';\r\n                    }\r\n                    else if (element.duration <= noOfDays) {\r\n                        el.className = 'marker';        \r\n                    } \r\n                    else {\r\n                        el.className = 'marker2';\r\n                    }\r\n\r\n                    new mapboxgl.Marker(el).setLngLat([element.location.coordinates[0], element.location.coordinates[1]]).addTo(map);\r\n                    //markers.push(marker);\r\n                });\r\n\r\n                this.setState({\r\n                    map,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div ref={(el) => (this.mapContainer = el)} className=\"mapContainer\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport '../App.css'\r\nimport data from './data/map.json'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\n\r\n\r\n// console.log(data.features);\r\nconst Sidebar = data.features.map((data) => {\r\n    //console.log(data.properties.locationName) to call data\r\n    return (\r\n      \r\n      <List disablePadding dense>\r\n        \r\n        <ListItem button>\r\n          <ListItemText>\r\n            <div className = \"cardItem\">\r\n            <small>{data.properties.reportedDate}</small>\r\n            <h4>{data.properties.locationName}</h4>\r\n            <p>{data.properties.description}</p>\r\n            <a href={data.properties.site}>Source:{data.properties.site}</a>\r\n            </div>\r\n          </ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    );\r\n\r\n})\r\n   \r\n    \r\n  \r\n\r\nexport default Sidebar\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Sidebar from './components/Sidebar'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('mapbox')\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <h3>MALAYSIA COVID-19 FROM LOCAL NEWS</h3>\r\n    {Sidebar}\r\n  </React.StrictMode>,\r\n  document.getElementById('sidebar')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}